x = 2
y = 4
x * y
z = x * y
z
x
x = c(1,2,3,4)
class(x)
x
x = 3
x = 6, 4
x = (6, 4)
x = [5, 6]
5+5
5/0
3 + 2
7/3
7 %/ 3
7 %% 3
log(10)
help(log)
log10(10)
log(10, base = 33)
x = 5
x
y <- 2
x * y
# razliciti nacini pridruzivanja vrijednosti
x = 5   #
x
y <- 2
x * y
a = c(3, 14, 5, 5)
b = c(1, 2, 4)
c = c(a, b)
d = 1:15
d = 1:0.5:15
d = 1:5:15
d = 1:15
e = 19:15
help(seq)
f = seq(from = 2, by = 3, length = 6)
g = rep(1, 9)
h = rep(c(1,2), 4)
i = rep(c(1,2,3), c(3,4,2))
A = matrix(1:9, 3, 3)
View(A)
A = matrix(1:9, nrow = 3, byrow = true)
A = matrix(1:9, nrow = 3, byrow = TRUE)
View(A)
A = matrix(1:9, nrow = 3, byrow = T)
View(A)
e = 19:16
E = rbind(a, e)
View(E)
C = cbind(a,e)
View(E)
View(C)
D = diag(5)
View(D)
D = diag(1:5)
View(D)
7 %/% 3
a = 6:1
b = seq(from = 1, by = 2, length = length(a))
a + b
sum(a)
a * b
a x b
sum(a * b)
a^3
exp(a)
help(sample)
sample(1:5, size = 9, replace = T)
set.seed(10032017)
sample(1:5, size = 9, replace = T)
matrix(sample(1:5, size = 9, replace = T))
matrix(sample(1:5, size = 9, replace = T), nrow = 3, byrow = T)
t(A)
A = matrix(sample(1:5, size = 9, replace = T), nrow = 3, byrow = T)
t(A)
A^2
A*A
A%*%A
matrix.pow(A, 2)
install.packages("matrixcalc")
matrix.pow(A, 2)
library("matrixcalc", lib.loc="~/R/win-library/3.3")
matrix.pow(A, 2)
matrix.pow(A, 2)
matrix.power(A, 2)
require("matrixcalc") #TO JE OBAVEZNO RADI PDF
matrix.power(A, 2)
v = c(1,2,3)
A * v
A %*% v
det(A)
A.inv = slove(A)
A.inv = solve(A)
View(A.inv)
matrix.power(A, -1)
View(A.inv)
colSums(A)
rowSums(A)
a = c(2,3,5,7,11)
b = rep(c(3,1,5), c(4,3,6))
c = seq(from = 31, by = -2, length = 12)
d = c(b,c)
A = matrix(d, nrow = 5, byrow = T)
View(A)
View(A)
e = A %*% a
sum(e)
View(e)
podaci = c(1,2,3)
class(podaci)
typeof(podaci)
podaci2 = factor(c("PLAVA", "ZELENA", "PLAVA", "PLAVA"))
podaci2
podaci3 = c(2,2,2,3,1,1,2)
podaci3  =factor(podaci3, labels = c("P","Z","S"))
podaci3
podaci3f = factor(podaci3, labels = c("P","Z","S"))
podaci3 = c(2,2,2,3,1,1,2)
podaci3f
podaci3
levels(podaci3f)
podaci4 = c(2,2,2,3,1,1,2)
podaci4f = factor(podaci4, labels = c("P", "Z", "S"))
iris
help(iris)
head(iris)
dim(iris)
nrow(iris)
ncol(iris)
pod = iris
class(pod)
pod$Sepal.Length
summary(pod)
pod = head(iris)
pod
pod$novi.stupac = c(1,2,3,4,5,6)
pod
pod$novi.stupac = NULL
pod
novi.red = data.frame(5.1, 3.2, 1.2, 0.5, setosa)
novi.red = data.frame(5.1, 3.2, 1.2, 0.5, "setosa")
novi.red
pod2 = rbind(pod, novi.red)
pod2
pod2 = rbind(pod, novi.red)
names(novi.red) = names(pod)
pod2 = rbind(pod, novi.red)
pod2
pod[2]
pod[2]
pod[2:4]
pod[2:4]
pod[c(1,3)]
pod[-c(1,3)]
pod[c(2,5), c(3,4)]
pod[2,2] = 2.8
pod[2:3, 3:4]
pod[2:3, 2:4]
pod[1:3,]
names(pod[1]) = "bokte"
pod
pod[1:3,]
pod[1:3, c("Species")]
pod$Sepal.Length > 4.7
pod
pod[pod$Sepal.Length > 4.7,]
pod
pod[pod$Sepal.Length > 4.7,]
pod
pod[pod$Sepal.Length > 4.7,]
pod[pod$Sepal.Length > 4.7 & pod$Sepal.Width > 3.5,]
pod[indeksi,]
indeksi = which(pod$Sepal.Length > 4.7)
pod[indeksi,]
irisdata = iris
mean(irisdata$Petal.Length)
mean(irisdata$Petal.Length, trim = 0.2)
median(irisdata$Petal.Length)
quantile(irisdata$Petal.Length, probs = c(0.25, 0.5, 0.75))
mfv(irisdata$Petal.Length)
install.packages("modeest")
library("modeest", lib.loc="~/R/win-library/3.3")
require(modeest)
mfv(irisdata$Petal.Length)
max(irisdata$Petal.Length) - min(irisdata$Petal.Length)
IQR(irisdata$Petal.Length)
var(irisdata$Petal.Length)
sqrt(var(irisdata$Petal.Length))
sd(irisdata$Petal.Length)
cv(irisdata$Petal.Length)
install.packages("raster")
library("raster", lib.loc="~/R/win-library/3.3")
require(raster)
cv(irisdata$Petal.Length)
sd(irisdata$Petal.Length)/mean(irisdata$Petal.Length)
hist(irisdata$Petal.Length, breaks = 25)
hist(irisdata$Sepal.Length, breaks = 25, main = "Sepal length histogram")
hist(irisdata$Sepal.Length, breaks = 25, main = "Sepal length histogram", xlab = "Sepal length [cm]")
hist(irisdata$Sepal.Length, breaks = 25, main = "Sepal length histogram", xlab = "Sepal length [cm]", col = "green")
boxplot(irisdata$Sepal.Length)
summary(irisdata$Sepal.Length)
boxplot(irisdata$Sepal.Length)
boxplot(irisdata[-c(3,4,5)])
plot(irisdata$Sepal.Length, irisdata$Sepal.Width)
plot(irisdata$Sepal.Length[irisdata$Species = 'setosa'], irisdata$Sepal.Width)
plot(irisdata$Sepal.Length[irisdata$Species = "setosa"], irisdata$Sepal.Width)
plot(irisdata$Sepal.Length[irisdata$Species == "setosa"], irisdata$Sepal.Width)
plot(irisdata$Sepal.Length[irisdata$Species == 'setosa'], irisdata$Sepal.Width[irisdata$Species == 'setosa'], col = "red")
plot(irisdata$Sepal.Length[irisdata$Species == 'setosa'], irisdata$Sepal.Width[irisdata$Species == 'setosa'], col = "blue")
plot(irisdata$Sepal.Length[irisdata$Species == 'virginica'], irisdata$Sepal.Width[irisdata$Species == 'virginica'], col = "red")
plot(irisdata$Sepal.Length[irisdata$Species == 'setosa'], irisdata$Sepal.Width[irisdata$Species == 'setosa'], col = "blue")
points(irisdata$Sepal.Length[irisdata$Species == 'virginica'], irisdata$Sepal.Width[irisdata$Species == 'virginica'], col = "red")
plot(irisdata$Sepal.Length[irisdata$Species == 'setosa'], irisdata$Sepal.Width[irisdata$Species == 'setosa'], col = "blue")
points(irisdata$Sepal.Length[irisdata$Species == 'virginica'], irisdata$Sepal.Width[irisdata$Species == 'virginica'], col = "red")
plot(irisdata$Sepal.Length[irisdata$Species == 'setosa'], irisdata$Sepal.Width[irisdata$Species == 'setosa'], col = "blue")
points(irisdata$Sepal.Length[irisdata$Species == 'virginica'], irisdata$Sepal.Width[irisdata$Species == 'virginica'], col = "red")
plot.points(irisdata$Sepal.Length[irisdata$Species == 'virginica'], irisdata$Sepal.Width[irisdata$Species == 'virginica'], col = "red")
# Rjesenje Primjera 1.
etr = scan("head_sites_of_Etruscans.txt")
# Rjesenje Primjera 1.
etr = scan("head_sites_of_Etruscans.txt", r)
# Rjesenje Primjera 1.
etr = scan("head_sites_of_Etruscans.txt", "r")
# Rjesenje Primjera 1.
etr = scan("head_sizes_of_Etruscans.txt")
# Rjesenje Primjera 1.
etr = scan("head_sizes_of_Etruscans.txt")
n_etr = len(etr)
# Rjesenje Primjera 1.
etr = scan("head_sizes_of_Etruscans.txt")
n_etr = lenght(etr)
install.packages("TeachingDemos")
require(TeachingDemos)
sigma.test(etr)
# 1.
tal = scan("head_sizes_of_Italians.txt")
var.test(ets,tal)
# 1.
tal = scan("head_sizes_of_Italians.txt")
var.test(etr,tal)
mean(etr)
mean(tal)
mean(etr)
mean(tal)
help("t.test")
mean(etr)
mean(tal)
t.test(etr, tal, "greater", var.equal)
mean(etr)
mean(tal)
t.test(etr, tal, "greater", var.equal = TRUE)
load("Kikiriki.Rdata")
load("Kikiriki.Rdata")
kikiriki
load("Kikiriki.Rdata")
kikiriki
head(kikiriki)
load("Kikiriki.Rdata")
kikiriki
head(kikiriki)
hist(kikiriki$uzorak1)
load("Kikiriki.Rdata")
kikiriki
head(kikiriki)
hist(kikiriki$uzorak1)
t.test(kikiriki$uzorak1, kikiriki$uzorak2, alternative = "less", var.equal = TRUE)
load("Kikiriki.Rdata")
kikiriki
head(kikiriki)
hist(kikiriki$uzorak1)
t.test(kikiriki$uzorak1, kikiriki$uzorak2, alternative = "less")
load("Kikiriki.Rdata")
kikiriki
head(kikiriki)
hist(kikiriki$uzorak1)
t.test(kikiriki$uzorak1, kikiriki$uzorak2, alternative = "less", conf.level = 0.99)
pod = read.table("100m_data.txt")
pod = read.table("100m_data.txt")
head(pod)
pod = read.table("100m_data.txt")
head(pod)
pod = read.table("100m_data.txt")
head(pod)
t.test(pod$V1, pod$V2, alternative = "greater")
pod = read.table("100m_data.txt")
head(pod)
t.test(pod$V1, pod$V2, alt = "greater")
pod = read.table("100m_data.txt")
head(pod)
t.test(pod$V1, pod$V2, alternative = "greater")
pod = read.table("100m_data.txt", header = TRUE)
head(pod)
t.test(pod$V1, pod$V2, alternative = "greater")
pod = read.table("100m_data.txt", header = TRUE)
head(pod)
t.test(pod$V1, pod$V2, alternative = "greater")
pod = read.table("100m_data.txt", header = TRUE)
head(pod)
t.test(pod$Before, pod$After, alternative = "greater")
read.table("credit.csv", header = TRUE)
df = read.table("credit.csv", header = TRUE)
df = read.table("credit.csv", header = TRUE)
head(df)
df = read.table("credit.csv", header = TRUE, sep = ";")
df = read.table("credit.csv", header = TRUE, sep = ";")
head(df)
df = read.table("credit.csv", header = TRUE, sep = ";")
summary(df)
df$default = factor(df$default, labels = c("solvent", "delinquent"))
df$default = factor(df$default, labels = c("solvent", "delinquent"))
df$marriage = factor(df$marriage, labels = c("married", "single", "other"))
df$default = factor(df$default, labels = c("solvent", "delinquent"))
df$marriage = factor(df$marriage, labels = c("married", "single", "other"))
df$education = factor(df$education, labels = c("graduate", "university", "high school", "other", "unknown1", "unknown2"))
df$default = factor(df$default, labels = c("solvent", "delinquent"))
df$marriage = factor(df$marriage, labels = c("married", "single", "other"))
df$education = factor(df$education, labels = c("graduate", "university", "high school", "other", "unknown1", "unknown2"))
levels(df$education) = c("graduate", "university", "high school", "other", "unknown", "unknown")
View(novi.red)
table(df$education)
pie(table(df$education))
pie(table(df$education))
barplot(table(df$education))
help("binom.test")
binom.test(df$default, 30000, p = 0.21)
n = length(df$default)
binom.test(df$default, 30000, p = 0.21)
n = length(df$default)
n = length(df$default)
x = length(length(which(df$default=="delinquent")))
n = length(df$default)
x = length(which(df$default=="delinquent"))
n = length(df$default)
x = length(which(df$default=="delinquent"))
binom.test(x, n, 0.21)
n = c(length(df$default[df$gender=="f"]), length(df$default[df$gender=="m"])
n = c(length(df$default[df$gender=="f"]), length(df$default[df$gender=="m"]))
n = c(length(df$default[df$gender=="f"]), length(df$default[df$gender=="m"]))
x = c(length(which(df$default[df$gender=="f"]=="delinquent")), length(which(df$default[df$gender=="m"]=="delinquent")))
n = c(length(df$default[df$gender=="f"]), length(df$default[df$gender=="m"]))
x = c(length(which(df$default[df$gender=="f"]=="delinquent")), length(which(df$default[df$gender=="m"]=="delinquent")))
prop.test(x,n,alternative = "t")
n = c(length(df$default[df$gender=="f"]), length(df$default[df$gender=="m"]))
x = c(length(which(df$default[df$gender=="f"]=="delinquent")), length(which(df$default[df$gender=="m"]=="delinquent")))
prop.test(x,n,alternative = "t", correct = "F")
table(df$education, df$default)
t = table(df$education, df$default)
addmargins(t)
chisq.test(t)
# nekoliko osnovnih operacija
# zbrajanje
5 + 4
# dijeljenje
7 / 3
# cjelobrojno dijeljenje
7 %/% 3
# ostatak pri dijeljenju
7 %% 3
# logicke operacije
TRUE & FALSE
# nekoliko osnovnih funkcija
log(10)
help(log)
x<-5
a = c(5,5)
b = c(6,8,5)
c = c(a,b)
d = 1:5
help(seq)
seq(1, 5, 2)
rep
help(rep)
rep(1, 9)
g = rep(1, 9)
rep(c(1, 2, 3), 4)
rep(c(1, 2, 3), c(3, 4, 2))
A = matrix(1:9, nrow=3)
View(A)
View(A)
A = matrix(1:9, nrow=4, byrow =T)
View(A)
View(A)
A = matrix(1:9, nrow=3, byrow = T)
View(A)
View(A)
a = 6:1
b = seq(from = 1, by = 2, length = length(a))
a + b
sum(a)
a * b
a^3
exp(a)
help(sample)
A = matrix(sample(1:5, size = 9, replace = TRUE), byrow = T, nrow = 3)
View(A)
View(A)
t(A)
A^2
A%*%A
matrix.power(A, 2)
require("matrixcalc")
matrix.power(A,2)
v = c(1, 2, 3)
A * v
A %*% v
det(A)
A.inv = solve(A)
A %*% A.inv
# numerički podaci
podaci = c(2,2,2,3,1,2,3,3,1,2,3,3,1)
podaci
class(podaci)
# factor (nominalne varijable)
# ordered factor (ordinalne varijable)
# logicki tip podatka
# numerički podaci
podaci = c(2,2,2,3,1,2,3,3,1,2,3,3,1)
podaci
class(podaci)
# factor (nominalne varijable)
podaci2 = factor(c("PLAVA","CRNA","PLAVA","PLAVA","SMEDJA","CRNA"))
podaci2
class(podaci2)
# ordered factor (ordinalne varijable)
# logicki tip podatka
levels(podaci2)
num.vektor = c(3,2,2,3,1,2,3,3,1,2,3,3,1)
podaci3 = factor(num.vektor, labels = c("PLAVA", "CRNA", "SMEĐA"))
podaci3
class(podaci3)
podaci3
help(iris)
pod = iris
dim(pod)
nrow(pod)
names(pod)
pod$Sepal.Length
class(pod$Petal.Length)
summary(pod)
source('C:/Users/Marin/Desktop/FER/6. semestar/SAP/PROJEKT/SAP-project/main.r', echo=TRUE)
source('C:/Users/Marin/Desktop/FER/6. semestar/SAP/PROJEKT/SAP-project/main.r', echo=TRUE)
source('C:/Users/Marin/Desktop/FER/6. semestar/SAP/PROJEKT/SAP-project/main.r', echo=TRUE)
setwd("C:/Users/Marin/Desktop/FER/6. semestar/SAP/PROJEKT/SAP-project")
source('C:/Users/Marin/Desktop/FER/6. semestar/SAP/PROJEKT/SAP-project/main.r', echo=TRUE)
source('C:/Users/Marin/Desktop/FER/6. semestar/SAP/PROJEKT/SAP-project/main.r', echo=TRUE)
