t.test(kikiriki$uzorak1, kikiriki$uzorak2, alternative = "less", conf.level = 0.99)
pod = read.table("100m_data.txt")
pod = read.table("100m_data.txt")
head(pod)
pod = read.table("100m_data.txt")
head(pod)
pod = read.table("100m_data.txt")
head(pod)
t.test(pod$V1, pod$V2, alternative = "greater")
pod = read.table("100m_data.txt")
head(pod)
t.test(pod$V1, pod$V2, alt = "greater")
pod = read.table("100m_data.txt")
head(pod)
t.test(pod$V1, pod$V2, alternative = "greater")
pod = read.table("100m_data.txt", header = TRUE)
head(pod)
t.test(pod$V1, pod$V2, alternative = "greater")
pod = read.table("100m_data.txt", header = TRUE)
head(pod)
t.test(pod$V1, pod$V2, alternative = "greater")
pod = read.table("100m_data.txt", header = TRUE)
head(pod)
t.test(pod$Before, pod$After, alternative = "greater")
read.table("credit.csv", header = TRUE)
df = read.table("credit.csv", header = TRUE)
df = read.table("credit.csv", header = TRUE)
head(df)
df = read.table("credit.csv", header = TRUE, sep = ";")
df = read.table("credit.csv", header = TRUE, sep = ";")
head(df)
df = read.table("credit.csv", header = TRUE, sep = ";")
summary(df)
df$default = factor(df$default, labels = c("solvent", "delinquent"))
df$default = factor(df$default, labels = c("solvent", "delinquent"))
df$marriage = factor(df$marriage, labels = c("married", "single", "other"))
df$default = factor(df$default, labels = c("solvent", "delinquent"))
df$marriage = factor(df$marriage, labels = c("married", "single", "other"))
df$education = factor(df$education, labels = c("graduate", "university", "high school", "other", "unknown1", "unknown2"))
df$default = factor(df$default, labels = c("solvent", "delinquent"))
df$marriage = factor(df$marriage, labels = c("married", "single", "other"))
df$education = factor(df$education, labels = c("graduate", "university", "high school", "other", "unknown1", "unknown2"))
levels(df$education) = c("graduate", "university", "high school", "other", "unknown", "unknown")
View(novi.red)
table(df$education)
pie(table(df$education))
pie(table(df$education))
barplot(table(df$education))
help("binom.test")
binom.test(df$default, 30000, p = 0.21)
n = length(df$default)
binom.test(df$default, 30000, p = 0.21)
n = length(df$default)
n = length(df$default)
x = length(length(which(df$default=="delinquent")))
n = length(df$default)
x = length(which(df$default=="delinquent"))
n = length(df$default)
x = length(which(df$default=="delinquent"))
binom.test(x, n, 0.21)
n = c(length(df$default[df$gender=="f"]), length(df$default[df$gender=="m"])
n = c(length(df$default[df$gender=="f"]), length(df$default[df$gender=="m"]))
n = c(length(df$default[df$gender=="f"]), length(df$default[df$gender=="m"]))
x = c(length(which(df$default[df$gender=="f"]=="delinquent")), length(which(df$default[df$gender=="m"]=="delinquent")))
n = c(length(df$default[df$gender=="f"]), length(df$default[df$gender=="m"]))
x = c(length(which(df$default[df$gender=="f"]=="delinquent")), length(which(df$default[df$gender=="m"]=="delinquent")))
prop.test(x,n,alternative = "t")
n = c(length(df$default[df$gender=="f"]), length(df$default[df$gender=="m"]))
x = c(length(which(df$default[df$gender=="f"]=="delinquent")), length(which(df$default[df$gender=="m"]=="delinquent")))
prop.test(x,n,alternative = "t", correct = "F")
table(df$education, df$default)
t = table(df$education, df$default)
addmargins(t)
chisq.test(t)
# nekoliko osnovnih operacija
# zbrajanje
5 + 4
# dijeljenje
7 / 3
# cjelobrojno dijeljenje
7 %/% 3
# ostatak pri dijeljenju
7 %% 3
# logicke operacije
TRUE & FALSE
# nekoliko osnovnih funkcija
log(10)
help(log)
x<-5
a = c(5,5)
b = c(6,8,5)
c = c(a,b)
d = 1:5
help(seq)
seq(1, 5, 2)
rep
help(rep)
rep(1, 9)
g = rep(1, 9)
rep(c(1, 2, 3), 4)
rep(c(1, 2, 3), c(3, 4, 2))
A = matrix(1:9, nrow=3)
View(A)
View(A)
A = matrix(1:9, nrow=4, byrow =T)
View(A)
View(A)
A = matrix(1:9, nrow=3, byrow = T)
View(A)
View(A)
a = 6:1
b = seq(from = 1, by = 2, length = length(a))
a + b
sum(a)
a * b
a^3
exp(a)
help(sample)
A = matrix(sample(1:5, size = 9, replace = TRUE), byrow = T, nrow = 3)
View(A)
View(A)
t(A)
A^2
A%*%A
matrix.power(A, 2)
require("matrixcalc")
matrix.power(A,2)
v = c(1, 2, 3)
A * v
A %*% v
det(A)
A.inv = solve(A)
A %*% A.inv
# numerički podaci
podaci = c(2,2,2,3,1,2,3,3,1,2,3,3,1)
podaci
class(podaci)
# factor (nominalne varijable)
# ordered factor (ordinalne varijable)
# logicki tip podatka
# numerički podaci
podaci = c(2,2,2,3,1,2,3,3,1,2,3,3,1)
podaci
class(podaci)
# factor (nominalne varijable)
podaci2 = factor(c("PLAVA","CRNA","PLAVA","PLAVA","SMEDJA","CRNA"))
podaci2
class(podaci2)
# ordered factor (ordinalne varijable)
# logicki tip podatka
levels(podaci2)
num.vektor = c(3,2,2,3,1,2,3,3,1,2,3,3,1)
podaci3 = factor(num.vektor, labels = c("PLAVA", "CRNA", "SMEĐA"))
podaci3
class(podaci3)
podaci3
help(iris)
pod = iris
dim(pod)
nrow(pod)
names(pod)
pod$Sepal.Length
class(pod$Petal.Length)
summary(pod)
pod$novi.stupac = c(3,2,1,3,2,1)
pod
pod$novi.stupac = NULL
pod
novi.red = data.frame(5.1,3.2,1.6,0.5,"virginica")
class(novi.red)
novi.red
names(no)
names(novi.red) = names(pod)
pod = rbind(pod, novi.red)
pod
pod = pod[-c(7),]
pod
pod[2]
pod[c(2,5)]
pod[-c(2)]
pod[c(2), c(3)]
pod[1,1] = 22
pod
lv = pod$Sepal.Width > 3.3
lv
pod[lv,]
pod = read.table("iris.txt")
pod
pod = read.table("iris.txt", sep = ",")
pod
class(pod$Species)
pod$Species = as.factor(pod$Species)
class(pod$Species)
hist(irisdata$Sepal.Length, breaks = 25, main = 'Sepal')
hist(irisdata$Sepal.Length, breaks= 15, probability = TRUE,
main = 'Sepal length prob', xlab = 'Sep. len', ylab = 'prob')
boxplot(irisdata[-c(1,2,5)])
boxplot(irisdata[c(3,4)])
summary(irisdata$Sepal.Length)
plot(irisdata$Sepal.Length, irisdata$Sepal.Width, xlab = 'len',
ylab = 'wid')
plot(irisdata$Sepal.Length[irisdata$Species=='setosa'],
irisdata$Sepal.Width[irisdata$Species=='setosa'], col='blue',
xlim = c(min(irisdata$Sepal.Length),max(irisdata$Sepal.Length)),
ylim = c(min(irisdata$Sepal.Width), max(irisdata$Sepal.Width)),
xlab = "Sep. len", ylab = 'Sep.wid')
points(irisdata$Sepal.Length[irisdata$Species=='versicolor'],
irisdata$Sepal.Width[irisdata$Species == 'versicolor'],
col='red')
plot(irisdata$Sepal.Length[irisdata$Species=='setosa'],
irisdata$Sepal.Width[irisdata$Species=='setosa'], col='blue',
xlim = c(min(irisdata$Sepal.Length),max(irisdata$Sepal.Length)),
ylim = c(min(irisdata$Sepal.Width), max(irisdata$Sepal.Width)),
xlab = "Sep. len", ylab = 'Sep.wid')
points(irisdata$Sepal.Length[irisdata$Species=='versicolor'],
irisdata$Sepal.Width[irisdata$Species == 'versicolor'],
col='red')
# dijagram rasprsenja duljine i sirine lapa s razlicitim bojama za dvije vrste irisa
plot(irisdata$Sepal.Length[irisdata$Species=='setosa'],
irisdata$Sepal.Width[irisdata$Species=='setosa'], col='blue',
xlim = c(min(irisdata$Sepal.Length),max(irisdata$Sepal.Length)),
ylim = c(min(irisdata$Sepal.Width), max(irisdata$Sepal.Width)),
xlab = "Sep. len", ylab = 'Sep.wid')
points(irisdata$Sepal.Length[irisdata$Species=='versicolor'],
irisdata$Sepal.Width[irisdata$Species == 'versicolor'],
col='red')
etr = scan('head_sizes_of_Etruscans.txt')
head(etr)
n_etr = length(etr)
hist(etr, breaks = seq(from = min(etr) - 0.5, to = max(etr) + 0.5, length = 11))
n_etr = length(etr)
help(seq)
hist(etr, breaks = seq(from = min(etr) -0.5, to = max(etr) + 0.5, length = 11))
mean(etr)
x_potez_etr = mean(etr)
sd_etr = sd(etr)
t_alfa_pola = qt(1 - alfa/2, df = n_etr - 1)
alfa = 0.05
t_alfa_pola = qt(1 - alfa/2, df = n_etr - 1)
dg = x_potez_etr- t_alfa_pola * (sd_etr / sqrt(n_etr))
dg
mu_0_etr = 140
t_etr = ((x_potez_etr - mu_0_etr)/sd)
t_etr = ((x_potez_etr - mu_0_etr)/sd_etr) * sqrt(n_etr)
pv = 1 - pt(t_etr, df = n_etr - 1)
pv
help("t.test")
t.test(etr, mu = mu_0_etr, alt = "greater")
hist(etr, breaks = seq(from = min(etr) -0.5, to = max(etr) + 0.5, length = 11))
tal = scan("head_sizes_of_Italians.txt")
n_tal = length(tal)
x_potez_tal = mean(tal)
sd_tal = sd(tal)
hist(tal, breaks = seq(min(tal) - 0.5, max(tal) + 0.5), 9)
hist(tal, breaks = seq(min(tal) - 0.5, max(tal) + 0.5), length =9)
hist(tal, breaks = seq(min(tal) - 0.5, max(tal) + 0.5), length(9))
hist(tal, breaks = seq(min(tal) - 0.5, max(tal) + 0.5, length = 9))
mu_tal = 132
t.test(tal, mu=mu_tal, alternative = "two-sided")
t.test(tal, mu=mu_tal, alternative = "two.sided")
install.packages("TeachingDemos")
require(TeachingDemos)
sigma.test(etr)
sigma.test(etr, sigmasq = 50, alt= "two.sided")
var.test(etr, tal)
boxplot(etr, tal)
t.test(tal, etr, alt="greater", var.equal = TRUE)
t.test(etr, tal, alt="greater", var.equal = TRUE)
kiki = read.xlsx
install.packages("xlsx")
require("xslx")
require("xslx")
require("xlsx")
read.xlsx("Kikiriki.xlsx")
kiki = read.xlsx("Kikiriki.xlsx")
kiki = read.xlsx("Kikiriki.xlsx", 1)
kiki = read.xlsx("Kikiriki.xlsx", sheetIndex = 1, startRow = 1, header = TRUE)
head(kiki)
hist(kiki$uzorak1)
hist(kiki$uzorak2)
save(kiki, file="Kikiriki.Rdata")
load("Kikiriki.Rdata")
boxplot(kiki$uzorak1, kiki$uzorak2)
t.test(kiki$uzorak1, kiki$uzorak2, alt = "less")
podaci = read.table("100m_data.txt")
head(podaci)
dir()
hist(podaci$V1, podaci$V2)
hist(podaci$V1)
podaci = read.table("100m_data.txt", header = TRUE)
head(podaci)
hist(podaci$Before)
hist(podaci$After)
t.test(podaci$Before, podaci$After, alternative = "greater")
t.test(podaci$Before, podaci$After, alternative = "greater", paired = TRUE)
t.test(podaci$Before, podaci$After, alternative = "less", paired = TRUE)
greater
t.test(podaci$Before, podaci$After, alternative = "greater", paired = TRUE)
t.test(podaci$Before, podaci$After, alternative = "less", paired = TRUE)
t.test(podaci$Before, podaci$After, alternative = "greater", paired = TRUE)
setwd("C:/Users/Marin/Desktop/FER/6. semestar/SAP/PROJEKT/SAP-project")
head(xs.log_returns)
source('C:/Users/Marin/Desktop/FER/6. semestar/SAP/PROJEKT/SAP-project/main.r', echo=TRUE)
source('C:/Users/Marin/Desktop/FER/6. semestar/SAP/PROJEKT/SAP-project/main.r', echo=TRUE)
5+5
source_eval <- function(file) source(file, print.eval = TRUE)
# filepaths, etc.
# globals not common between users
source_eval('uncommon.r')
setwd(WORK_DIR)
investment_funds <- c("ERSTEAdriaticEquity", "OTPMeridian20", "ZBAktiv")
pension_funds <- c("RaiffeisenDMF", "ERSTEPlaviEXPERT", "ERSTEPlaviPROTECT")
source('data_extraction.r')
xs <- read_normalize(CSV_DATA)
xs.log_returns <- to_log_returns_df(xs, 3:length(xs))
xs.market_portfolio <- to_data_frame(xs, "CROBEX", xs.market_portfolio)
xs.investment <- to_data_frame(xs, investment_funds, xs.investment)
xs.pension <- to_data_frame(xs, pension_funds, xs.pension)
xs.investment.log_returns <- to_log_returns_df(xs.investment, 3:length(xs.investment))
xs.pension.log_returns <- to_log_returns_df(xs.pension, 3:length(xs.pension))
source('plotting.r')
plot_timeseries(xs, xs$Date, xs$CROBEX)
plot_timeseries(xs, xs$Date, xs$CROBEX)
source_eval <- function(file) source(file, print.eval = TRUE)
# filepaths, etc.
# globals not common between users
source_eval('uncommon.r')
setwd(WORK_DIR)
source('data_extraction.r')
xs <- read_normalize(CSV_DATA)
diff_function_log <- function(St, St_minus_one) log(St) - log(St_minus_one)
xs.log_returns <- to_time_series_diff_df(xs, get_data_cols(xs), diff_function_log)
xs.summary <- summary(xs)
xs.log_returns.summary <- summary(xs.log_returns)
diff_function_sub <- function(St, St_minus_one) St - St_minus_one
xs.returns <- to_time_series_diff_df(xs, get_data_cols(xs), diff_function_sub)
xs.returns.summary <- summary(xs.returns)
investment_funds <- c("ERSTEAdriaticEquity", "OTPMeridian20", "ZBAktiv")
pension_funds <- c("RaiffeisenDMF", "ERSTEPlaviEXPERT", "ERSTEPlaviPROTECT")
market_portfolio <- c("CROBEX")
xs.market_portfolio <- to_data_frame(xs, market_portfolio, xs.market_portfolio)
xs.investment <- to_data_frame(xs, investment_funds, xs.investment)
xs.pension <- to_data_frame(xs, pension_funds, xs.pension)
source('plotting.r')
xs.graphs.timeseries <- lapply( xs[get_data_cols(xs)], function(data_col) plot_timeseries(xs, xs$Date, data_col) )
xs.graphs.boxplots <- boxplot(xs[get_data_cols_without_market_portfolio(xs)])
xs.log_returns.graphs.boxplots <- boxplot(xs.log_returns[get_data_cols_without_market_portfolio(xs.log_returns)], ylim = c(-0.1, 0.1) )
source_eval <- function(file) source(file, print.eval = TRUE)
# filepaths, etc.
# globals not common between users
source_eval('uncommon.r')
setwd(WORK_DIR)
source('data_extraction.r')
xs <- read_normalize(CSV_DATA)
diff_function_log <- function(St, St_minus_one) log(St) - log(St_minus_one)
xs.log_returns <- to_time_series_diff_df(xs, get_data_cols(xs), diff_function_log)
xs.returns.summary <- summary(xs.returns)
investment_funds <- c("ERSTEAdriaticEquity", "OTPMeridian20", "ZBAktiv")
pension_funds <- c("RaiffeisenDMF", "ERSTEPlaviEXPERT", "ERSTEPlaviPROTECT")
market_portfolio <- c("CROBEX")
xs.market_portfolio <- to_data_frame(xs, market_portfolio, xs.market_portfolio)
xs.investment <- to_data_frame(xs, investment_funds, xs.investment)
xs.pension <- to_data_frame(xs, pension_funds, xs.pension)
xs.investment.log_returns <- to_log_returns_df(xs.investment, 3:length(xs.investment))
xs.pension.log_returns <- to_log_returns_df(xs.pension, 3:length(xs.pension))
source('plotting.r')
plot_timeseries(xs, xs$Date, xs$CROBEX)
xs.graphs.timeseries <- lapply( xs[get_data_cols(xs)], function(data_col) plot_timeseries(xs, xs$Date, data_col) )
xs.graphs.boxplots <- boxplot(xs[get_data_cols_without_market_portfolio(xs)])
xs.log_returns.graphs.boxplots <- boxplot(xs.log_returns[get_data_cols_without_market_portfolio(xs.log_returns)], ylim = c(-0.1, 0.1) )
source('plotting.r')
plot_timeseries(xs, xs$Date, xs$CROBEX)
xs.graphs.timeseries <- lapply( xs[get_data_cols(xs)], function(data_col) plot_timeseries(xs, xs$Date, data_col) )
xs.graphs.boxplots <- boxplot(xs[get_data_cols_without_market_portfolio(xs)])
xs.log_returns.graphs.boxplots <- boxplot(xs.log_returns[get_data_cols_without_market_portfolio(xs.log_returns)] )
xs.investment.log_returns
head(xs.investment.log_returns)
head(xs.pension.log_returns)
investment_funds
xs.pension
head(xs.pension)
investment_funds <- c("ERSTEAdriaticEquity", "OTPMeridian20", "ZBAktiv")
pension_funds <- c("RaiffeisenDMF", "ERSTEPlaviEXPERT", "ERSTEPlaviPROTECT")
market_portfolio <- c("CROBEX")
xs.market_portfolio <- to_data_frame(xs, market_portfolio, xs.market_portfolio)
xs.investment <- to_data_frame(xs, investment_funds, xs.investment)
xs.pension <- to_data_frame(xs, pension_funds, xs.pension)
xs.investment.log_returns <- to_log_returns_df(xs.investment, 3:length(xs.investment))
xs.pension.log_returns <- to_log_returns_df(xs.pension, 3:length(xs.pension))
head(xs.pension)
xs.returns.summary
head(xs.log_returns)
head(xs)
source_eval <- function(file) source(file, print.eval = TRUE)
# filepaths, etc.
# globals not common between users
source_eval('uncommon.r')
setwd(WORK_DIR)
source('data_extraction.r')
xs <- read_normalize(CSV_DATA)
diff_function_log <- function(St, St_minus_one) log(St) - log(St_minus_one)
xs.log_returns <- to_time_series_diff_df(xs, get_data_cols(xs), diff_function_log)
xs.returns.summary <- summary(xs.returns)
investment_funds <- c("ERSTEAdriaticEquity", "OTPMeridian20", "ZBAktiv")
pension_funds <- c("RaiffeisenDMF", "ERSTEPlaviEXPERT", "ERSTEPlaviPROTECT")
market_portfolio <- c("CROBEX")
xs.market_portfolio <- to_data_frame(xs, market_portfolio, xs.market_portfolio)
xs.investment <- to_data_frame(xs, investment_funds, xs.investment)
xs.pension <- to_data_frame(xs, pension_funds, xs.pension)
xs.investment.log_returns <- to_log_returns_df(xs.investment, 3:length(xs.investment))
xs.pension.log_returns <- to_log_returns_df(xs.pension, 3:length(xs.pension))
source('plotting.r')
plot_timeseries(xs, xs$Date, xs$CROBEX)
xs.graphs.timeseries <- lapply( xs[get_data_cols(xs)], function(data_col) plot_timeseries(xs, xs$Date, data_col) )
xs.graphs.boxplots <- boxplot(xs[get_data_cols_without_market_portfolio(xs)])
xs.log_returns.graphs.boxplots <- boxplot(xs.log_returns[get_data_cols_without_market_portfolio(xs.log_returns)], ylim = c(-0.1, 0.1) )
source('C:/Users/Marin/Desktop/FER/6. semestar/SAP/PROJEKT/SAP-project/main.r', echo=TRUE)
head(xs.pension)
source_eval <- function(file) source(file, print.eval = TRUE)
# filepaths, etc.
# globals not common between users
source_eval('uncommon.r')
setwd(WORK_DIR)
source('data_extraction.r')
xs <- read_normalize(CSV_DATA)
diff_function_log <- function(St, St_minus_one) log(St) - log(St_minus_one)
xs.log_returns <- to_time_series_diff_df(xs, get_data_cols(xs), diff_function_log)
xs.returns.summary <- summary(xs.returns)
investment_funds <- c("ERSTEAdriaticEquity", "OTPMeridian20", "ZBAktiv")
pension_funds <- c("RaiffeisenDMF", "ERSTEPlaviEXPERT", "ERSTEPlaviPROTECT")
market_portfolio <- c("CROBEX")
xs.market_portfolio <- to_data_frame(xs, market_portfolio, xs.market_portfolio)
xs.investment <- to_data_frame(xs, investment_funds, xs.investment)
xs.pension <- to_data_frame(xs, pension_funds, xs.pension)
xs.investment.log_returns <- to_log_returns_df(xs.investment, 3:length(xs.investment))
xs.pension.log_returns <- to_log_returns_df(xs.pension, 3:length(xs.pension))
source('plotting.r')
plot_timeseries(xs, xs$Date, xs$CROBEX)
xs.graphs.timeseries <- lapply( xs[get_data_cols(xs)], function(data_col) plot_timeseries(xs, xs$Date, data_col) )
xs.graphs.boxplots <- boxplot(xs[get_data_cols_without_market_portfolio(xs)])
xs.log_returns.graphs.boxplots <- boxplot(xs.log_returns[get_data_cols_without_market_portfolio(xs.log_returns)], ylim = c(-0.1, 0.1) )
head(xs.returns)
source('data_extraction.r')
xs <- read_normalize(CSV_DATA)
diff_function_log <- function(St, St_minus_one) log(St) - log(St_minus_one)
xs.log_returns <- to_time_series_diff_df(xs, get_data_cols(xs), diff_function_log)
xs.returns.summary <- summary(xs.returns)
head(xs.returns)
source_eval <- function(file) source(file, print.eval = TRUE)
# filepaths, etc.
# globals not common between users
source_eval('uncommon.r')
setwd(WORK_DIR)
source('data_extraction.r')
xs <- read_normalize(CSV_DATA)
diff_function_log <- function(St, St_minus_one) log(St) - log(St_minus_one)
xs.log_returns <- to_time_series_diff_df(xs, get_data_cols(xs), diff_function_log)
xs.returns.summary <- summary(xs.returns)
head(xs.returns)
investment_funds <- c("ERSTEAdriaticEquity", "OTPMeridian20", "ZBAktiv")
pension_funds <- c("RaiffeisenDMF", "ERSTEPlaviEXPERT", "ERSTEPlaviPROTECT")
market_portfolio <- c("CROBEX")
xs.market_portfolio <- to_data_frame(xs, market_portfolio, xs.market_portfolio)
xs.investment <- to_data_frame(xs, investment_funds, xs.investment)
xs.pension <- to_data_frame(xs, pension_funds, xs.pension)
xs.investment.log_returns <- to_log_returns_df(xs.investment, 3:length(xs.investment))
xs.pension.log_returns <- to_log_returns_df(xs.pension, 3:length(xs.pension))
source('plotting.r')
plot_timeseries(xs, xs$Date, xs$CROBEX)
xs.graphs.timeseries <- lapply( xs[get_data_cols(xs)], function(data_col) plot_timeseries(xs, xs$Date, data_col) )
xs.graphs.boxplots <- boxplot(xs[get_data_cols_without_market_portfolio(xs)])
xs.log_returns.graphs.boxplots <- boxplot(xs.log_returns[get_data_cols_without_market_portfolio(xs.log_returns)], ylim = c(-0.1, 0.1) )
head(xs.returns)
head(xs.returns)
head(xs.returns)
# Chunk 1
source_eval <- function(file) source(file, print.eval = TRUE)
# filepaths, etc.
# globals not common between users
source_eval('uncommon.r')
setwd(WORK_DIR)
# Chunk 2
source('data_extraction.r')
xs <- read_normalize(CSV_DATA)
diff_function_log <- function(St, St_minus_one) log(St) - log(St_minus_one)
xs.log_returns <- to_time_series_diff_df(xs, get_data_cols(xs), diff_function_log)
xs.returns.summary <- summary(xs.returns)
head(xs.returns)
# Chunk 3
investment_funds <- c("ERSTEAdriaticEquity", "OTPMeridian20", "ZBAktiv")
pension_funds <- c("RaiffeisenDMF", "ERSTEPlaviEXPERT", "ERSTEPlaviPROTECT")
market_portfolio <- c("CROBEX")
xs.market_portfolio <- to_data_frame(xs, market_portfolio, xs.market_portfolio)
xs.investment <- to_data_frame(xs, investment_funds, xs.investment)
xs.pension <- to_data_frame(xs, pension_funds, xs.pension)
xs.investment.log_returns <- to_log_returns_df(xs.investment, 3:length(xs.investment))
xs.pension.log_returns <- to_log_returns_df(xs.pension, 3:length(xs.pension))
# Chunk 4
source('plotting.r')
plot_timeseries(xs, xs$Date, xs$CROBEX)
xs.graphs.timeseries <- lapply( xs[get_data_cols(xs)], function(data_col) plot_timeseries(xs, xs$Date, data_col) )
xs.graphs.boxplots <- boxplot(xs[get_data_cols_without_market_portfolio(xs)])
xs.log_returns.graphs.boxplots <- boxplot(xs.log_returns[get_data_cols_without_market_portfolio(xs.log_returns)], ylim = c(-0.1, 0.1) )
5 + 6
head(xs)
mean(xs.log_returns)
source('C:/Users/Marin/Desktop/FER/6. semestar/SAP/PROJEKT/SAP-project/main.R', echo=TRUE)
xs.graphs.boxplots
head(xs)
mean(xs.log_returns)
mean(xs.log_returns$OTPMeridian20)
mean(xs.log_returns$CROBEX)
